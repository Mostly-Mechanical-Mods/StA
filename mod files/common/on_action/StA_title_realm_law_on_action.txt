on_game_start_after_lobby = {
	on_actions = {
		StA_title_realm_law_init
	}
}

StA_title_realm_law_init = {
	effect = {
		random_player = {
			create_story = { type = StA_obligation_levels save_scope_as = zero }
			create_story = { type = StA_obligation_levels save_scope_as = one }
			create_story = { type = StA_obligation_levels save_scope_as = two }
			create_story = { type = StA_obligation_levels save_scope_as = three }
			create_story = { type = StA_obligation_levels save_scope_as = four }
			scope:zero = {	set_variable = { name = flag value = flag:0 } set_variable = { name = value value = 0 }}
			scope:one = {	set_variable = { name = flag value = flag:1 } set_variable = { name = value value = 1 }}
			scope:two = {	set_variable = { name = flag value = flag:2 } set_variable = { name = value value = 2 }}
			scope:three = {	set_variable = { name = flag value = flag:3 } set_variable = { name = value value = 3 }}
			scope:four = {	set_variable = { name = flag value = flag:4 } set_variable = { name = value value = 4 }}
			add_to_global_variable_list = { name = StA_levels_4 target = scope:zero }
			add_to_global_variable_list = { name = StA_levels_4 target = scope:one }
			add_to_global_variable_list = { name = StA_levels_4 target = scope:two }
			add_to_global_variable_list = { name = StA_levels_4 target = scope:three }
			add_to_global_variable_list = { name = StA_levels_4 target = scope:four }
			add_to_global_variable_list = { name = StA_levels_2 target = scope:zero }
			add_to_global_variable_list = { name = StA_levels_2 target = scope:one }
			add_to_global_variable_list = { name = StA_levels_2 target = scope:two }
			add_to_global_variable_list = { name = StA_levels_1 target = scope:zero }
			add_to_global_variable_list = { name = StA_levels_1 target = scope:one }
			StA_setup_title_law_story = { LAW = feudal_government_taxes		LEVELS = 4 }
			StA_setup_title_law_story = { LAW = feudal_government_levies	LEVELS = 4 }
			StA_setup_title_law_story = { LAW = war_declaration_rights		LEVELS = 1 }
			StA_setup_title_law_story = { LAW = title_revocation_rights		LEVELS = 1 }
			StA_setup_title_law_story = { LAW = succession_rights			LEVELS = 1 }
			StA_setup_title_succession_law_story = { LAW = male_only_law }
			StA_setup_title_succession_law_story = { LAW = male_preference_law }
			StA_setup_title_succession_law_story = { LAW = equal_law }
			StA_setup_title_succession_law_story = { LAW = female_preference_law }
			StA_setup_title_succession_law_story = { LAW = female_only_law }
			StA_setup_title_succession_law_story = { LAW = feudal_elective_succession_law }
			StA_setup_title_succession_law_story = { LAW = princely_elective_succession_law }
			StA_setup_title_succession_law_story = { LAW = gaelic_elective_succession_law }
			StA_setup_title_succession_law_story = { LAW = saxon_elective_succession_law }
			StA_setup_title_succession_law_story = { LAW = scandinavian_elective_succession_law }

			# create_story = {
			# 	type = StA_title_law
			# 	save_scope_as = feudal_government_taxes
			# }
			# scope:feudal_government_taxes = {
			# 	set_variable = {
			# 		name = law
			# 		value = flag:feudal_government_taxes
			# 	}
			# 	set_variable = {
			# 		name = levels
			# 		value = 5
			# 	}
			# }
			# add_to_global_variable_list = {
			# 	name = StA_title_laws
			# 	target = scope:feudal_government_taxes
			# }
		}

		# set_global_variable = { name = feudal_government_taxes value = flag:feudal_government_taxes }
		# set_global_variable = { name = feudal_government_levies value = flag:feudal_government_levies }
		# set_global_variable = { name = war_declaration_rights value = flag:war_declaration_rights }
		# set_global_variable = { name = title_revocation_rights value = flag:title_revocation_rights }
		# set_global_variable = { name = succession_rights value = flag:succession_rights }

		# add_to_global_variable_list = { name = StA_title_laws target = global_var:feudal_government_taxes_ }
		# add_to_global_variable_list = { name = StA_title_laws target = global_var:feudal_government_levies_ }
		# add_to_global_variable_list = { name = StA_title_laws target = global_var:war_declaration_rights_ }
		# add_to_global_variable_list = { name = StA_title_laws target = global_var:title_revocation_rights_ }
		# add_to_global_variable_list = { name = StA_title_laws target = global_var:succession_rights_ }

		set_global_variable = {
			name = 0
			value = 0
		}
		set_global_variable = {
			name = 1
			value = 1
		}
		set_global_variable = {
			name = 2
			value = 2
		}
		set_global_variable = {
			name = 3
			value = 3
		}
		set_global_variable = {
			name = 4
			value = 4
		}
		# add_to_global_variable_list = {
		# 	name = tree_obligation
		# 	target = global_var:0
		# }
		# add_to_global_variable_list = {
		# 	name = tree_obligation
		# 	target = global_var:1
		# }
		# add_to_global_variable_list = {
		# 	name = tree_obligation
		# 	target = global_var:2
		# }
		# add_to_global_variable_list = {
		# 	name = tree_obligation
		# 	target = global_var:3
		# }
		# add_to_global_variable_list = {
		# 	name = tree_obligation
		# 	target = global_var:4
		# }
		# add_to_global_variable_list = {
		# 	name = boolean_obligation
		# 	target = global_var:0
		# }
		# add_to_global_variable_list = {
		# 	name = boolean_obligation
		# 	target = global_var:1
		# }

		every_ruler = {
			limit = { is_landless_ruler = no }
			save_scope_as = ruler
			# ordered_held_title = {
			# 	limit = { tier >= tier_county }
			# 	order_by = tier
			# 	max = 99
			# 	check_range_bounds = no
			# 	if = {
			# 		limit = {
			# 			trigger_if = {
			# 				limit = { PREV.highest_held_title_tier > tier_county }
			# 				NOT = { tier = tier_county }
			# 				any_this_title_or_de_jure_above = {
			# 					holder = scope:ruler
			# 					NOT = { THIS = PREV }
			# 					has_variable = StA_title_realm_law
			# 					count = 0
			# 				}
			# 			}
			# 		}
			# 		scope:ruler = {
			# 			set_variable = {
			# 				name = StA_title
			# 				value = PREV
			# 			}
			# 			debug_log = "CREATE STORY 1"
			# 			var:StA_title = { debug_log_scopes = no }
			# 			create_story = StA_title_realm_law
			# 		}
			# 	}
			# }
			every_held_title = {
				limit = {
					tier = PREV.highest_held_title_tier
					trigger_if = {
						limit = { tier = tier_county }
						THIS = PREV.primary_title
					}
				}
				PREV = {
					set_variable = {
						name = StA_title
						value = PREV
					}
					debug_log = "CREATE STORY 1"
					var:StA_title = { debug_log_scopes = no }
					create_story = StA_title_realm_law
				}

			}
		}

		every_ruler = {
			limit = {
				has_government = feudal_government
				is_independent_ruler = no
				# highest_held_title_tier >= tier_county
				primary_title = { has_variable = StA_title_allegiance }
				primary_title.var:StA_title_allegiance = { has_variable = StA_title_realm_law }
			}
			vassal_contract_set_obligation_level = { type = feudal_government_taxes level = primary_title.var:StA_title_allegiance.var:StA_title_realm_law.var:feudal_government_taxes_ }
			vassal_contract_set_obligation_level = { type = feudal_government_levies level = primary_title.var:StA_title_allegiance.var:StA_title_realm_law.var:feudal_government_levies_ }
			vassal_contract_set_obligation_level = { type = title_revocation_rights level = primary_title.var:StA_title_allegiance.var:StA_title_realm_law.var:title_revocation_rights_ }
			vassal_contract_set_obligation_level = { type = war_declaration_rights level = primary_title.var:StA_title_allegiance.var:StA_title_realm_law.var:war_declaration_rights_ }
			vassal_contract_set_obligation_level = { type = succession_rights level = primary_title.var:StA_title_allegiance.var:StA_title_realm_law.var:succession_rights_ }
		}
	}
}

on_title_gain = {
	on_actions = {
		StA_on_title_gain
	}
}

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
StA_on_title_gain = {
	effect = {
		save_scope_as = new_holder
		scope:title = {
			if = {
				limit = { has_variable = StA_title_realm_law }
				if = {
					limit = {
						exists = scope:previous_holder
						scope:previous_holder = {
							is_alive = yes
							highest_held_title_tier >= tier_county
						}
					}
					scope:previous_holder = {
						# scope:previous_holder doesn't have a primary title realm law, create one, all the rest is handled in the story_cycle on_setup
						if = {
							limit = { NOT = { primary_title = { has_variable = StA_title_realm_law }}}
							set_variable = {
								name = StA_title
								value = primary_title
							}
							debug_log = "CREATE STORY 2"
							var:StA_title = { debug_log_scopes = no }
							create_story = StA_title_realm_law
						}
						# scope:previous_holder has a primary title realm law, check vassal allegiance
						else = {
							every_vassal = {
								limit = {
									OR = {
										primary_title = { NOT = { has_variable = StA_title_allegiance }}
										NOT = { primary_title.var:StA_title_allegiance.holder = scope:previous_holder }
									}
								}
								primary_title = {
									StA_remove_current_title_allegiance = yes
									StA_set_title_allegiance_to_liege = { LIEGE = scope:previous_holder }
								}
							}
						}
					}
				}
				# transfer story to scope:new_holder
				StA_reset_cooldown_title_holder_change = yes
				var:StA_title_realm_law = {
					make_story_owner = scope:new_holder
					set_variable = {
						name = StA_ruler
						value = scope:new_holder
					}
					if = {
						limit = { NOT = { scope:title = scope:new_holder.primary_title }}
						scope:title = {
							if = {
								limit = {
									NOR = {
										has_title_law_flag = succession_gender_laws
										has_title_law_flag = advanced_succession_law
										has_title_law_flag = elective_succession_law
									}
									any_this_title_or_de_jure_above = {
										NOT = { THIS = PREV }
										holder = scope:new_holder
										has_variable = StA_title_realm_law
										trigger_if = {
											limit = { scope:title.tier > tier_county }
											StA_title_has_identical_law_as_target = { TITLE = scope:title }
										}
									}
								}
								ordered_this_title_or_de_jure_above = {
									limit = {
										NOT = { THIS = PREV }
										holder = scope:new_holder
										has_variable = StA_title_realm_law
									}
									order_by = reverse_tier
									save_scope_as = new_title_allegiance
								}
							}
							else_if = {
								limit = {
									NOR = {
										has_title_law_flag = succession_gender_laws
										has_title_law_flag = advanced_succession_law
										has_title_law_flag = elective_succession_law
									}
									tier < scope:new_holder.highest_held_title_tier
									trigger_if = {
										limit = { scope:title.tier > tier_county }
										StA_title_has_identical_law_as_target = { TITLE = scope:new_holder.primary_title }
									}
								}
								scope:new_holder.primary_title = { save_scope_as = new_title_allegiance }
							}
						}
					}
					else = {
						if = {
							limit = {
								scope:new_holder = { has_variable = primary_title }
								scope:new_holder.var:primary_title = { StA_title_can_merge_authority_to = { TITLE = scope:title }}
							}
							scope:new_holder.var:primary_title = { StA_merge_title_authority = { TITLE = scope:title }}
						}
						scope:new_holder = {
							set_variable = {
								name = primary_title
								value = scope:title
							}
						}
					}
					# update allegiance of pledged titles
					every_in_list = {
						variable = StA_pledge_allegiance
						# # remove allegiance of titles owned by scope:new_holder
						# if = {
						# 	limit = { holder = scope:new_holder }
						# 	PREV = {
						# 		remove_list_variable = {
						# 			name = StA_pledge_allegiance
						# 			target = PREV
						# 		}
						# 	}
						# }
						# update allegiance of vassals of scope:new_holder
						if = {
							limit = { holder.liege = scope:new_holder }
							if = {
								StA_remove_current_title_allegiance = yes
								StA_set_title_allegiance_to_liege = { LIEGE = scope:new_holder }
							}
						}
						# remove allegiance of independent rulers
						else_if = {
							limit = { holder = { is_independent_ruler = yes }}
							StA_remove_current_title_allegiance = yes
						}
						# update allegiance of vassals external to the sub_realm
						else = {
							StA_remove_current_title_allegiance = yes
							StA_set_title_allegiance_to_liege = { LIEGE = holder.liege }
						}
					}
					if = {
						limit = {
							OR = {
								AND = {
									has_variable_list = StA_pledge_allegiance
									variable_list_size = {
										name = StA_pledge_allegiance
										value = 0
									}
								}
								var:StA_title.tier = tier_county
							}
						}
						scope:title = {
							debug_log = "END STORY"
							debug_log_scopes = no
							remove_variable = StA_title_realm_law
						}
						end_story = yes
					}
				}
			}
			StA_remove_current_title_allegiance = yes
			if = {
				limit = { THIS = scope:new_holder.primary_title }
				# StA_remove_allegiance_from_non_primary_titles = yes
				debug_log = "STA NEW PRIMARY TITLE"
				debug_log_scopes = no
				if = {
					limit = { NOT = { has_variable = StA_title_realm_law }}
					scope:new_holder = {
						set_variable = {
							name = StA_title
							value = scope:title
						}
						debug_log = "CREATE STORY 3"
						var:StA_title = { debug_log_scopes = no }
						create_story = StA_title_realm_law
					}
				}
				scope:new_holder = {
					ordered_held_title = {
						limit = {
							NOT = { THIS = scope:new_holder.primary_title }
							target_is_de_jure_liege_or_above = scope:new_holder.primary_title
							NOR = {
								has_title_law_flag = succession_gender_laws
								has_title_law_flag = advanced_succession_law
								has_title_law_flag = elective_succession_law
							}
						}
						max = 99
						check_range_bounds = no
						order_by = tier
						debug_log = "TITLE_TO_MERGE"
						debug_log_scopes = no
						save_scope_as = title_to_merge
						ordered_this_title_or_de_jure_above = {
							limit = {
								NOT = { THIS = PREV }
								holder = scope:new_holder
								has_variable = StA_title_realm_law
							}
							order_by = reverse_tier
							if = {
								limit = { StA_title_has_identical_law_as_target = { TITLE = scope:title_to_merge }}
								save_scope_as = title_merged_into
								debug_log = "TITLE_TO_MERGE_INTO"
								debug_log_scopes = no
								scope:title_to_merge = { StA_merge_title_authority = { TITLE = scope:title_merged_into }}
							}
						}
					}
				}
				if = {
					limit = { scope:new_holder = { is_independent_ruler = no }}
					StA_set_title_allegiance_to_liege = { LIEGE = scope:new_holder.liege }
				}
				if = {
					limit = {
						tier >= tier_barony
						NOT = { has_variable = StA_title_realm_law }
					}
					scope:new_holder = {
						set_variable = {
							name = StA_title
							value = scope:title
						}
						debug_log = "CREATE STORY 4"
						var:StA_title = { debug_log_scopes = no }
						create_story = StA_title_realm_law
					}
				}
			}
			else_if = {
				limit = {
					NOT = { has_variable = StA_title_realm_law }
					tier = scope:new_holder.highest_held_title_tier
				}
				scope:new_holder = {
					set_variable = {
						name = StA_title
						value = scope:title
					}
					debug_log = "CREATE STORY 5"
					var:StA_title = { debug_log_scopes = no }
					create_story = StA_title_realm_law
				}
			}
		}
		if = {
			limit = { exists = scope:new_title_allegiance }
			StA_merge_title_authority = { TITLE = scope:new_title_allegiance }
		}
		every_vassal = {
			limit = { primary_title = { target_is_de_jure_liege_or_above = scope:title }}
			primary_title = {
				StA_remove_current_title_allegiance = yes
				StA_set_title_allegiance_to_liege = { LIEGE = ROOT }
			}
		}
	}
}

on_vassal_gained = {
	on_actions = {
		StA_on_vassal_gained
	}
}

# A character gains a vassal
# root = character gaining vassal
# scope:vassal = vassal being gained
# scope:old_liege = the previous liege of the vassal. Might be the null character (vassal used to be a non-ruler or independent), so make sure to use "exists" checks where relevant
StA_on_vassal_gained = {
	effect = {
		save_scope_as = new_liege
		scope:vassal.primary_title = {
			if = {
				limit = {
					has_variable = StA_title_allegiance
					NOT = { var:StA_title_allegiance.holder = scope:old_liege }
				}
				debug_log = "(StA_debug) StA_on_vassal_gained // vassal was pledging allegiance to a title not held by his old liege"
				debug_log_scopes = yes
			}
			StA_remove_current_title_allegiance = yes
			StA_set_title_allegiance_to_liege = { LIEGE = ROOT }
		}
	}
}

on_war_won_attacker = {
	on_actions = {
		StA_on_war_won_attacker
	}
}

# called for when a casus belli resolves in one of the following ways.
# same scopes are available in these events as in the CBs themselves, this just fires for all CBs instead of a specific CB.
# note that any events/effects fired here WILL NOT show up in the war summary tooltip; they fire at the same time as the war resolution, but are not actually part of the war resolution itself.

StA_on_war_won_attacker = {
	trigger = {
		OR = {
			scope:war = { using_cb = independence_faction_war }
			scope:war = { using_cb = independence_war }
		}
	}
	effect = {
		scope:war = {
			every_war_attacker = {
				primary_title = {
					StA_remove_current_title_allegiance = yes
				}
			}
		}
	}
}

on_death = {
	on_actions = {
		StA_on_death
	}
}

StA_on_death = {
	trigger = {
		is_ruler = yes
		is_landless_ruler = no			
	}
	effect = {
		every_held_title = { add_to_list = inheritable_titles }
		every_alert_creatable_title = { add_to_list = inheritable_titles }
		every_in_list = {
			list = inheritable_titles
			ordered_this_title_or_de_jure_above = {
				limit = {
					NOT = { THIS = PREV }
					holder = ROOT
					has_variable = StA_title_realm_law
				}
				order_by = reverse_tier
				var:StA_title_realm_law = { save_scope_as = inherited_laws }
			}
			if = {
				limit = { NOT = { exists = scope:inherited_laws }}
				ROOT.primary_title.var:StA_title_realm_law = { save_scope_as = inherited_laws }
			}
			StA_set_laws_to_inherit = { TRANSFER_FROM = scope:inherited_laws }
			clear_saved_scope = inherited_laws
		}
	}
}